{-# OPTIONS --without-K #-}

open import Base
open import Homotopy.TruncatedHIT

{-
The idea is that if [n : ℕ] and [A : Set i], then [τ n A] is defined by the
following n-truncated higher inductive type:

    module Homotopy.TruncationHIT {i} (n : ℕ) (A : Set i) where

    (n)data τ : Set i where
      proj : A → τ

More explanations on the way this is done can be found in TruncatedHIT.agda.
This file contains nothing but stuff that could (should) be autogenerated from
the three lines above.
-}

module Homotopy.TruncationHIT {i} (n : ℕ) (A : Set i) where

private
  data #τ : Set i where
    #proj : A → #τ

    #top : (f : Sⁿ n → #τ) → #τ

τ : Set i
τ = #τ

proj : A → τ
proj = #proj

top : (f : Sⁿ n → τ) → τ
top = #top

postulate  -- HIT
  rays : (f : Sⁿ n → τ) (x : Sⁿ n) → top f ≡ f x
  hack-prop : (p : n ≡ 0) (x y : τ) → (x ≡ y)

#τ-rec : ∀ {j} (P : τ → Set j)
  (proj* : (x : A) → P (proj x))
  {top* : (f : Sⁿ n → τ) (p : (x : Sⁿ n) → P (f x)) → P (top f)}
  {rays* : (f : Sⁿ n → τ) (p : (x : Sⁿ n) → P (f x)) (x : Sⁿ n)
    → transport P (rays f x) (top* f p) ≡ p x}
  {hack-prop* : (p : n ≡ 0) (x y : τ) (x* : P x) (y* : P y)
    → (transport P (hack-prop p x y) x* ≡ y* )}
  → ((x : τ) → P x)
#τ-rec P proj* {top*} {rays*} {hack-prop*} (#proj u) = proj* u
#τ-rec P proj* {top*} {rays*} {hack-prop*} (#top f) =
  top* f (λ x → #τ-rec P proj* {top*} {rays*} {hack-prop*} (f x))

#τ-rec-nondep : ∀ {j} (C : Set j)
  (proj* : A → C)
  {top* : (f : Sⁿ n → τ) (p : Sⁿ n → C) → C}
  {rays* : (f : Sⁿ n → τ) (p : Sⁿ n → C) (x : Sⁿ n) → top* f p ≡ p x}
  {hack-prop* : (p : n ≡ 0) (x y : τ) (x* y* : C) → x* ≡ y*}
  → (τ → C)
#τ-rec-nondep C proj* {top*} {rays*} {hack-prop*} (#proj u) = proj* u
#τ-rec-nondep C proj* {top*} {rays*} {hack-prop*} (#top f) =
  top* f (λ x → #τ-rec-nondep C proj* {top*} {rays*} {hack-prop*} (f x))

private
  contr : (n ≡ 0) → is-contr τ
abstract
  contr p = inhab-prop-is-contr (top (λ x → abort-nondep (transport Sⁿ p x)))
                                (all-paths-is-prop (hack-prop p))
                                  

-- Computation rules for [rays] are not needed

τ-rec :  ∀ {j} (P : τ → Set j)
  (proj* : (x : A) → P (proj x))
  {hack-prop* : (p : n ≡ 0) (x y : τ) (x* : P x) (y* : P y)
    → (transport P (hack-prop p x y) x* ≡ y* )}
  (trunc : (x : τ) → is-hlevel n (P x))
  → ((x : τ) → P x)
τ-rec P proj* {hack-prop*} trunc =
  #τ-rec P proj* {x₁} {x₂} {hack-prop*} where
  abstract
    u : (f : Sⁿ n → τ) (p : (x : Sⁿ n) → P (f x))
      → filling-dep n P f (top f , rays f) p
    u = hlevel-has-filling-dep τ P n contr (λ f → (top f , rays f))

    x₁ : (f : Sⁿ n → τ) (p : (x : Sⁿ n) → P (f x)) → P (top f)
    x₁ = λ f p → π₁ (u f p)

    x₂ : (f : Sⁿ n → τ) (p : (x : Sⁿ n) → P (f x)) (x : Sⁿ n)
      → transport P (rays f x) (x₁ f p) ≡ p x
    x₂ = λ f p → π₂ (u f p)

τ-rec-nondep : ∀ {j} (C : Set j)
  (proj* : A → C)
  {hack-prop* : (p : n ≡ 0) (x y : τ) (x* y* : C) → x* ≡ y*}
  (trunc : is-hlevel n C)
  → (τ → C)
τ-rec-nondep C proj* {hack-prop*} trunc =
  #τ-rec-nondep C proj* {λ _ p → π₁ (u p)}
                        {λ _ p → π₂ (u p)} {hack-prop*} where
  u : _
  u = hlevel-has-spheres-filled n _ trunc

-- The nth truncation is of h-level [n]
abstract
  τ-is-hlevel : is-hlevel n τ
  τ-is-hlevel = spheres-filled-is-hlevel n τ contr (λ f → (top f , rays f))
